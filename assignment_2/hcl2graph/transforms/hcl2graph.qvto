modeltype HCL uses 'http://www.example.org/metamodelHCL';
modeltype Graph uses 'http://dsldesign.tue.nl/graph';

transformation hcl2graph(in hcl : HCL, out Graph);

helper makeNode(l: String) : Graph::Node {
	return object Graph::Node {label := l};
}

helper makeEdge(t: Graph::Node, s: Graph::Style) : Graph::Edge {
	return object Graph::Edge {
		target := t;
		style := s;
	};
}

intermediate property Graph::Node::children : Collection(Graph::Node);

main() {
	// TODO: pass the nodes down the method here??? or define them as globa somehow??
	hcl.rootObjects()[HCL::Model] -> map model2graph();
}

// MODEL TRANSFORMATIONS
// ~~~~~~~~~~~~~~~~~~~~~

mapping HCL::Model::model2graph() : Graph::Graph {
	var processingNode := makeNode('CPU');
	var displayNode := makeNode('Display');
	// TODO: define root level mappings
	var computerNodes := self.computers -> map computer2node(processingNode, displayNode);
	
}

mapping HCL::Computer::computer2node(processing : Graph::Node, display: Graph::Node) : Graph::Node {
	label := self.label;
	children := self.components -> map component2tree();
	outEdges := children -> map node2solidedge();
}

mapping HCL::Component::component2tree() : Graph::Node 
	disjuncts HCL::Processing::processing2tree, HCL::Display::display2tree;

// TODO: rename component to resource to align with the assignment description?
mapping HCL::Processing::processing2tree() : Graph::Node {
	label := self.label;
	// TODO: go back to single properties attribute with queries?
	var coreChildren := self.coresProperties -> map cores2node();
	var l1CacheChildren := self.cacheProperties[HCL::L1CacheProperty] -> map l1cache2node();
	children := coreChildren -> union(l1CacheChildren);
	outEdges := children -> map node2dashededge();
}

mapping HCL::CoresProperty::cores2node() : Graph::Node {
	label := self.number.toString() + "cores";
	shape := Graph::Shape::OVAL;
}

mapping HCL::CacheProperty::l1cache2node() : Graph::Node {
	label := self.size.toString() + self.unit;
	shape := Graph::Shape::OVAL;
}

mapping HCL::Display::display2tree() : Graph::Node {
	label := self.label;
	children := self.properties[HCL::ResolutionProperty] -> map resolution2node();
	outEdges := children -> map node2dashededge();
}

mapping HCL::ResolutionProperty::resolution2node() : Graph::Node {
	label := self.type;
}

mapping HCL::DiagonalProperty::diagonal2node() : Graph::Node {
	label := "";
}



// UTILITY TRANSFORMATIONS
// ~~~~~~~~~~~~~~~~~~~~~~~

mapping Graph::Node::node2solidedge() : Graph::Edge {
	target := self;
	style := Graph::Style::SOLID;
}

mapping Graph::Node::node2dashededge() : Graph::Edge {
	target := self;
	style := Graph::Style::DASHED;
}


// TODO: define all lower level mappings
//	resources:
//		1. https://wiki.eclipse.org/images/e/ee/QVTO_EclipseCon_2009_Presentation.pdf
//	general idea:
//		1. define transformation per each level
//		2. define edges
//	tips:
//		1. consider using helpers
//		2. consider queries and the rest
// TODO: restructure the model to be easier to process for conversion