// This is a comment.
//
// Language will support:
//
// Types:
//     Basic types:
//        Atomic:
//            {}        - default void, does nothing without any errors
//        Singulars:
//            Boolean
//            Unit Number    - with {} as default unit
//         Plurals:
//            Collection
//            String
//     Special types:
//        Construct      - having attributes / configurable
//        Error          - something terrible happens in behavior
//
// Operations:
//    ==    : Type x Type -> Boolean (deep equality)
//    ~~    : Collection x Collection -> Boolean (approximate match)
//    ~~    : Construct x Construct -> Boolean (approximate match)
//    and   : Boolean x Boolean -> Boolean
//    or    : Boolean x Boolean -> Boolean
//    +     : Unit Number x Unit Number -> Unit Number (if same units)
//    *     : –||- (same story)
//    -     : –||- (same story)
//    /     : –||- (same story)
//    %     : –||- (same story)
//    ^     : –||- (same story)
//    $     : Unit Number x Unit -> Unit Number (translates the units)
//
// For `Unit`’s there will be a predefined "translation" table.
//    e.g.
//        x cm $ m == (x / 100) m
//
// Special operators:
//    @ a_1, …, a_n.        - Makes a collection {a_1, …, a_n}
//    send_msg <Channel>    - Mimics message sending to the <Channel> 
//
// Built-ins:
//    Iteration:
//        <Collection> @> { x | a }    - does action `a` with value `x`
//        <Collection> @> { _ | a }    - does action `a` ignoring value
//        <Collection> #> { x | c }    - filters collection by `c`
//
// Every AIL program starts with declaring a `Module`.
Module : { Farm1 }

// Also we consider adding `Imports` support in the future.
// it would allows to access predefined/external definitions.
// In this example, `Commons`, is an assumed different module defined earlier.
// Imports : { Commons.send_msg }


// Allowing to configure the plants on the farm and their properties.
// Each plant has a `water` level attribute, and `temperature`.
// Also, it contains a `metadata` construct with extra information. 
Plants : {
    // Strawberry, like this, becomes a user-defined `Plant`.
    // This is what `Plantation`’s (see below) need.
    // In fact, this makes `Strawberry` a user-defined construct.
    // However, it includes all "basic" properties of a `Plant`.
    Strawberry <
        water_use : 5 mm,
        min_temp  : 20 C,
        max_water : 100 mm,
    >
}

// Each action is a parameterized behavior description:
//     %src - default context parameter, bound to the Asset calling it
//    <name> - is a basic type parameter
//    <name>* - is wrapped in a Collection if Singular
Actions : {
    notify : <%src, channels*> (
        channels @> {c | send_msg : {c, %src.metadata}}
    ),
    check_water : <%src, condition, job, fail_job> (
        if %src.water meets condition then do job else do fail_job
    ),
    check_avg_temp : <%src, condition, job> (
        size = %src.items $> {_ | + 1};
        total = %src.items $> {i | + i.temp};
        if total/size meets condition then do job;
    ),
    send_report : <%src, channels*, name_match> (
        channels  #> {c | c ~~ "abie"}} @> {c, send_msg : {c, %src.metadata}}
    )
}

// These are all the physical assets of the farm.
// For now, it includes only `Plantation`’s and `WaterSource`’s.
Assets : {
    strawberry_plants : Plantation<Strawberry> : {
        desc: "Strawberry fruits along the South border",
        area: 300 m^2,
        plantation_date: "2022-03-02",
        sensors : {
            water_level : Sensor : {
                "daily 9 am",
                check_water : { > 30 mm, notify : { [support] } }
            }
        }
    },
    water_tank : WaterSource : {
        installation_date: "2020-02-02",
        max_temp: 60 C, 
        capacity: 30 l,
        sensors : {
            water_level : Sensor : {
                "every 10 min", 
                check_water : {
                    > 50 mm,
                    notify : { [ support, admin, rss ] } 
                }
            }, 
            water_temp : Sensor : {
                "every 5 min",
                check_avg_temp : {
                    > %src.max_temp,
                    notify : {Channels #> {c | c ~~ "abie"}}.
                }
            }
        }
    }
}

// Message receiving channels.
// For now, it only represents a destination text.
// In the future, it can be extended to "event-bus" communication.
Channels : {
    support<support@farm.cool>, 
    admin<admin@farm.cool>, 
    rss<farm.feed.rss>,
    abie<abie@service.farm.cool>
}

// Used to define which "execution" scenarios have to be active.
Controllers: {
    // Predefined construct, controls the sensor schedule.
    MONITOR
    // Can be extended in the future with other controllers.
}