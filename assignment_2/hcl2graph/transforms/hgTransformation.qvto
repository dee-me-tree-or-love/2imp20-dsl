modeltype HCL uses 'http://www.example.org/metamodelHCL';
modeltype Graph uses 'http://dsldesign.tue.nl/graph';
	
transformation hgTransformation(in hcl : HCL, out Graph);

main() {
	hcl.rootObjects()[HCL::Computer]->map computer2graph();
}

mapping HCL::Computer::computer2graph() : Graph::Graph {
	name := self.label;
	nodes := self.component->map component2node();
}

mapping HCL::Computer::computer2node() : Graph::Node {
	label := self.label;
	shape := Shape::BOX;
}

mapping HCL::Component::component2node() : Graph::Node {
	label := self.label;
	shape := Shape::BOX;
}

//1
mapping HCL::Processing::procseeing2node() : Graph::Node {
	label := self.label;
	shape := Shape::BOX;
}

//1
mapping HCL::Display::display2node() : Graph::Node {
	label := self.label;
	shape := Shape::BOX;
}

//2
mapping HCL::ProcessingProperty::procseeingproperty2node() : Graph::Node {
}

//2
mapping HCL::Speed::speed2node() : Graph::Node {
	label := self.speed.toString() + ' GHz';
	shape := Shape::BOX;
}

mapping HCL::Speed::speed2edge() : Graph::Edge {}

//2
mapping HCL::Cores::cores2node() : Graph::Node {
	label := self.number.toString() + ' cores';
	shape := Shape::OVAL;
}

//2
mapping HCL::Cache::cache2node() : Graph::Node {}

//2:only L1
mapping HCL::L1::lone2node() : Graph::Node {
	label := self.number.toString() + ' ' + self.type.toString();
	shape := Shape::OVAL;
}

mapping HCL::DisplayProperty::displayproperty2node() : Graph::Node {}

mapping HCL::Type::type2node() : Graph::Node {
	label := self.dtype.toString();
	shape := Shape::OVAL;
}

mapping HCL::Diagonal::diagonal2node() : Graph::Node {
	label := self.inch.toString() + ' inch';
	shape := Shape::BOX;
}

//query getIntegerType() : Relational::Type {
//	return UML::DataType.allInstances()->select(e | e.name = "Integer")->asSequence()->first().oclAsType(UML::DataType).map datatype2type();
//}

query getAllProcessings() : Sequence(HCL::Processing) {
	return HCL::Processing.allInstances()->asSequence()
}

query getAllDisplays() : Sequence(HCL::Display) {
	return HCL::Display.allInstances()->asSequence()
}
