char *SKELETON_DEFAULT_CONSTRUCTS =
    "\n"
    "####################\n"
    "# Standard Imports #\n"
    "####################\n"
    "\n"
    "from abc import ABC, abstractmethod\n"
    "from dataclasses import dataclass\n"
    "from typing import Any, List, Dict, Callable, Union\n"
    "\n"
    "#########################\n"
    "# Defaults & Constructs #\n"
    "#########################\n"
    "\n"
    "@dataclass\n"
    "class UnitNumber:\n"
    "    value: Union[int, float]\n"
    "    unit: str\n"
    "\n"
    "class Plant:\n"
    "    pass\n"
    "\n"
    "@dataclass\n"
    "class Sensor:\n"
    "    trigger: str\n"
    "    action: Callable\n"
    "\n"
    "    def check(self):\n"
    "        print(f\"Sensor trigger: {self.trigger}\")\n"
    "        self.action()\n"
    "\n"
    "@dataclass\n"
    "class Observer:\n"
    "    address: str\n"
    "\n"
    "class Observable:\n"
    "    sensors: Dict[str, Sensor]\n"
    "\n"
    "class Asset:\n"
    "    pass\n"
    "\n"
    "class Plantation(Asset, Observable):\n"
    "    pass\n"
    "\n"
    "class WaterSource(Asset, Observable):\n"
    "    pass\n"
    "\n"
    "class Controller(ABC):\n"
    "    @abstractmethod\n"
    "    def bootstrap(self):\n"
    "        pass\n"
    "\n"
    "    @abstractmethod\n"
    "    def run(self):\n"
    "        pass\n"
    "\n"
    "######################\n"
    "# Built-in Utilities #\n"
    "######################\n"
    "\n"
    "@dataclass\n"
    "class MonitorController(Controller):\n"
    "    assets: List[Asset]\n"
    "    __triggers = {}\n"
    "\n"
    "    def __register_trigger(self, trigger, sensor):\n"
    "        self.__triggers = {\n"
    "            trigger: sensor,\n"
    "            **self.__triggers\n"
    "        }\n"
    "\n"
    "    def bootstrap(self):\n"
    "        print(\"Setting up the controller...\")\n"
    "        for asset in self.assets:\n"
    "            for key, sensor in asset.sensors.items():\n"
    "                self.__register_trigger(sensor.trigger, sensor)\n"
    "\n"
    "    def run(self):\n"
    "        triggers = self.__triggers.keys()\n"
    "        print(f\"Registered monitor triggers: {triggers}\")\n"
    "        for trigger, sensor in self.__triggers.items():\n"
    "            print(f\"Assume trigger happened: {trigger}...\")\n"
    "            sensor.check()\n"
    "\n"
    "def Action_send_message(*args):\n"
    "    def __internal_function__():\n"
    "        message_body = \";;;\".join([str(a) for a in args])\n"
    "        print(f\"INCOMING MESSAGE: {message_body}\")\n"
    "    return __internal_function__\n"
    "\n"
    "###################\n"
    "# Module contents #\n"
    "###################\n";

char *SKELETON_DEFAULT_CONTROLLER_CLAUSE =
    "# FIXME: add support for parallel processing\n"
    "def main():\n"
    "    # bootstrap controllers\n"
    "    for controller in CONTROLLERS:\n"
    "        controller.bootstrap()\n"
    "    # run controllers\n"
    "    for controller in CONTROLLERS:\n"
    "        controller.run()\n"
    "\n"
    "\n"
    "if __name__ == \"__main__\":\n"
    "    main()\n";
