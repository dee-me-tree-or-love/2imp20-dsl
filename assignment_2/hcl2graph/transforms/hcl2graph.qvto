modeltype HCL uses 'http://www.example.org/metamodelHCL';
modeltype Graph uses 'http://dsldesign.tue.nl/graph';

transformation hcl2graph(in hcl : HCL, out Graph);

helper makeNode(l: String, s: Graph::Shape) : Graph::Node {
	return object Graph::Node {
		label := l; 
		shape := s;
	};
}

helper makeBoxNode(l: String) : Graph::Node {
	return makeNode(l, Graph::Shape::BOX);
}

helper makeEdge(t: Graph::Node, s: Graph::Style) : Graph::Edge {
	return object Graph::Edge {
		target := t;
		style := s;
	};
}

helper Graph::Node::target2solidedge() : Graph::Edge {
	return makeEdge(self, Graph::Style::SOLID);
}

helper Graph::Node::target2dashededge() : Graph::Edge {
	return makeEdge(self, Graph::Style::DASHED);
}

// Property to contain the immediate children of the Node.
intermediate property Graph::Node::children : Collection(Graph::Node);

main() {
	// TODO: pass the nodes down the method here??? or define them as globa somehow??
	hcl.rootObjects()[HCL::Model] -> map model2graph();
}

// MODEL TRANSFORMATIONS
// ~~~~~~~~~~~~~~~~~~~~~

mapping HCL::Model::model2graph() : Graph::Graph {
	var processingTreeRoot : Graph::Node = self.makeProcessingSpeedTree();
	var displayTreeRoot : Graph::Node := self.makeDisplayDiagonalTree();
	var processingSpeeds : Collection(Graph::Node) := processingTreeRoot.children;
	var displayDiagonals : Collection(Graph::Node) := displayTreeRoot.children;
	// TODO: define root level mappings
	var propRoots : List(Graph::Node) := List {processingTreeRoot, displayTreeRoot};
	var computers : List(Graph::Node) := self.computers 
		-> collect(c|c.makeComputerSubGraph(processingTreeRoot, displayTreeRoot));
	nodes := propRoots
		-> union(computers)
		-> union(processingSpeeds -> asList())
		-> union(displayDiagonals -> asList())
		-> asList();
}

// Critical Property Subgraphs
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~

// TODO: (tech debt) overcome duplication with Display.
helper HCL::Model::makeProcessingSpeedTree() : Graph::Node {
	var root := makeBoxNode('CPU');
	var children : Set(Graph::Node) := self.uniqueProcessingSpeeds();
	var edges : Set(Graph::Edge) := children -> target2solidedge() -> asSet();
	root.outEdges := edges -> asOrderedSet();
	root.children := children;
	return root;
}

query HCL::Model::uniqueProcessingSpeeds() : Set(Graph::Node) {
	var props : Collection(HCL::Processing) := self.computers -> collect(c|c.processings());
	var speeds: Collection(HCL::SpeedProperty) := props -> collect(p | p -> speeds());
	var uniqueSpeedLabels : Set(String) = speeds -> nodeLabel() -> asSet();
	return uniqueSpeedLabels -> collect(l|makeBoxNode(l)) -> asSet();
}

query HCL::SpeedProperty::nodeLabel() : String {
	return self.speed.toString() + " " + self.unit;
}

// TODO: (tech debt) overcome duplication with CPU.
helper HCL::Model::makeDisplayDiagonalTree() : Graph::Node {
	var root := makeBoxNode('Display');
	var children : Set(Graph::Node) := self.uniqueDisplayDiagonals();
	var edges : Set(Graph::Edge) := children -> target2solidedge() -> asSet();
	root.outEdges := edges -> asOrderedSet();
	root.children := children;
	return root;
}

query HCL::Model::uniqueDisplayDiagonals() : Set(Graph::Node) {
	var props : Collection(HCL::Display) := self.computers -> collect(c|c.displays());
	var diagonals : Collection(HCL::DiagonalProperty) := props -> collect(p | p -> diagonals());
	var uniqueDiagonalLabels : Set(String) = diagonals -> nodeLabel() -> asSet();
	return uniqueDiagonalLabels -> collect(l|makeBoxNode(l)) -> asSet();
}

query HCL::DiagonalProperty::nodeLabel() : String {
	return self.size.toString() + " " + self.unit;
}

// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// Computer and Components Subgraphs
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

helper HCL::Computer::makeComputerSubGraph(
	globalProcessing : Graph::Node, 
	globalDisplay : Graph::Node
) : Collection(Graph::Node) {
	// root
	var computer : Graph::Node := makeBoxNode(self.label);
	// components
	// TODO: connect these to the global nodes
	var processings : Collection(Graph::Node) := self.processings() -> collect(p|p.makeProcessingPropsTree(globalProcessing));
	var displays : Collection(Graph::Node) := self.displays() -> collect(d|d.makeDisplayPropsTree(globalDisplay));
	// props
	var processingProps : Collection(Graph::Node) := processings -> collect(c|c.children);
	var displayProps : Collection(Graph::Node) := displays -> collect(c|c.children);
	// edges
	var processingEdges := processings -> target2solidedge();
	var displayEdges := displays -> target2solidedge();
	computer.outEdges := processingEdges -> union(displayEdges);
	var nodes := (List {computer})
		-> union(processings)
		-> union(processingProps)
		-> union(displays)
		-> union(displayProps)
		;
	return nodes;
}

helper HCL::Processing::makeProcessingPropsTree(
	globalProcessing : Graph::Node
) : Graph::Node {
	var root := makeBoxNode(self.label);

	// connect to the right global nodes
	var localLabels : List(String) := self.speeds() -> nodeLabel() -> asList();
	var parentNodes : Collection(Graph::Node) := globalProcessing.children -> asList() -> select(c | localLabels -> includes(c.label));
	parentNodes -> forEach(n){
		n.outEdges := n.outEdges -> union(root -> target2solidedge());
	};

	var coreChildren : List(Graph::Node) := self.cores() -> map core2node() -> asList();
	var cacheChildren : List(Graph::Node) := self.l1caches() -> map l1cache2node() -> asList();
	var coreEdges : List(Graph::Edge) := coreChildren -> target2dashededge();
	var cacheEdges : List(Graph::Edge) := cacheChildren -> target2dashededge();
	
	root.children := coreChildren -> union(cacheChildren);
	root.outEdges := coreEdges -> union(cacheEdges);
	
	return root;
}

mapping HCL::CoresProperty::core2node() : Graph::Node {
	label := self.number.toString() + " cores";
}

// TODO: we could reduce a lot of duplication here by
//		introducing a common interface e.g. IPlainValue and IUnitValue
mapping HCL::L1CacheProperty::l1cache2node() : Graph::Node {
	label := self.size.toString() + " " + self.unit;
}

helper HCL::Display::makeDisplayPropsTree(
	globalDisplay : Graph::Node
) : Graph::Node {
	var root := makeBoxNode(self.label);

	// connect to the right global nodes
	var localLabels : List(String) := self.diagonals() -> nodeLabel() -> asList();
	var parentNodes : Collection(Graph::Node) := globalDisplay.children -> asList() -> select(c | localLabels -> includes(c.label));
	parentNodes -> forEach(n){
		n.outEdges := n.outEdges -> union(root -> target2solidedge());
	};

	var children := self.resolutions() -> map resolution2node() -> asList();
	var edges := children -> target2dashededge();

	root.children := children;
	root.outEdges := edges;

	return root;
}

mapping HCL::ResolutionProperty::resolution2node() : Graph::Node {
	label := self.type;
}

// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// Utility functions
// ~~~~~~~~~~~~~~~~~

query HCL::Computer::processings() : Collection(HCL::Processing) {
	return self.components[HCL::Processing];
}

query HCL::Processing::speeds() : Collection(HCL::SpeedProperty) {
	return self.properties[HCL::SpeedProperty];
}

query HCL::Processing::cores() : Collection(HCL::CoresProperty) {
	return self.properties[HCL::CoresProperty];
}

query HCL::Processing::l1caches() : Collection(HCL::L1CacheProperty) {
	return self.properties[HCL::L1CacheProperty];
}

query HCL::Computer::displays() : Collection(HCL::Display) {
	return self.components[HCL::Display];
}

query HCL::Display::diagonals() : Collection(HCL::DiagonalProperty) {
	return self.properties[HCL::DiagonalProperty];
}

query HCL::Display::resolutions() : Collection(HCL::ResolutionProperty) {
	return self.properties[HCL::ResolutionProperty];
}
