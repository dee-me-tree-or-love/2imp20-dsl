/**
 */
package metamodelHCL.provider;

import java.util.ArrayList;
import java.util.Collection;

import metamodelHCL.util.MetamodelHCLAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MetamodelHCLItemProviderAdapterFactory extends MetamodelHCLAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MetamodelHCLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.Processing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessingItemProvider processingItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.Processing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessingAdapter() {
		if (processingItemProvider == null) {
			processingItemProvider = new ProcessingItemProvider(this);
		}

		return processingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.Storage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StorageItemProvider storageItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.Storage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStorageAdapter() {
		if (storageItemProvider == null) {
			storageItemProvider = new StorageItemProvider(this);
		}

		return storageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.Display} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisplayItemProvider displayItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.Display}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplayAdapter() {
		if (displayItemProvider == null) {
			displayItemProvider = new DisplayItemProvider(this);
		}

		return displayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.ReusedComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReusedComponentItemProvider reusedComponentItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.ReusedComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReusedComponentAdapter() {
		if (reusedComponentItemProvider == null) {
			reusedComponentItemProvider = new ReusedComponentItemProvider(this);
		}

		return reusedComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.L1CacheProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected L1CachePropertyItemProvider l1CachePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.L1CacheProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createL1CachePropertyAdapter() {
		if (l1CachePropertyItemProvider == null) {
			l1CachePropertyItemProvider = new L1CachePropertyItemProvider(this);
		}

		return l1CachePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.L2CacheProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected L2CachePropertyItemProvider l2CachePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.L2CacheProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createL2CachePropertyAdapter() {
		if (l2CachePropertyItemProvider == null) {
			l2CachePropertyItemProvider = new L2CachePropertyItemProvider(this);
		}

		return l2CachePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.L3CacheProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected L3CachePropertyItemProvider l3CachePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.L3CacheProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createL3CachePropertyAdapter() {
		if (l3CachePropertyItemProvider == null) {
			l3CachePropertyItemProvider = new L3CachePropertyItemProvider(this);
		}

		return l3CachePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.SingleStorage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleStorageItemProvider singleStorageItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.SingleStorage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleStorageAdapter() {
		if (singleStorageItemProvider == null) {
			singleStorageItemProvider = new SingleStorageItemProvider(this);
		}

		return singleStorageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.DiagonalProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagonalPropertyItemProvider diagonalPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.DiagonalProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagonalPropertyAdapter() {
		if (diagonalPropertyItemProvider == null) {
			diagonalPropertyItemProvider = new DiagonalPropertyItemProvider(this);
		}

		return diagonalPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.ResolutionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResolutionPropertyItemProvider resolutionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.ResolutionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResolutionPropertyAdapter() {
		if (resolutionPropertyItemProvider == null) {
			resolutionPropertyItemProvider = new ResolutionPropertyItemProvider(this);
		}

		return resolutionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.Computer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputerItemProvider computerItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.Computer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputerAdapter() {
		if (computerItemProvider == null) {
			computerItemProvider = new ComputerItemProvider(this);
		}

		return computerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.CoresProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoresPropertyItemProvider coresPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.CoresProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoresPropertyAdapter() {
		if (coresPropertyItemProvider == null) {
			coresPropertyItemProvider = new CoresPropertyItemProvider(this);
		}

		return coresPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metamodelHCL.SpeedProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpeedPropertyItemProvider speedPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link metamodelHCL.SpeedProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpeedPropertyAdapter() {
		if (speedPropertyItemProvider == null) {
			speedPropertyItemProvider = new SpeedPropertyItemProvider(this);
		}

		return speedPropertyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (processingItemProvider != null)
			processingItemProvider.dispose();
		if (storageItemProvider != null)
			storageItemProvider.dispose();
		if (displayItemProvider != null)
			displayItemProvider.dispose();
		if (reusedComponentItemProvider != null)
			reusedComponentItemProvider.dispose();
		if (l1CachePropertyItemProvider != null)
			l1CachePropertyItemProvider.dispose();
		if (l2CachePropertyItemProvider != null)
			l2CachePropertyItemProvider.dispose();
		if (l3CachePropertyItemProvider != null)
			l3CachePropertyItemProvider.dispose();
		if (singleStorageItemProvider != null)
			singleStorageItemProvider.dispose();
		if (diagonalPropertyItemProvider != null)
			diagonalPropertyItemProvider.dispose();
		if (resolutionPropertyItemProvider != null)
			resolutionPropertyItemProvider.dispose();
		if (computerItemProvider != null)
			computerItemProvider.dispose();
		if (modelItemProvider != null)
			modelItemProvider.dispose();
		if (coresPropertyItemProvider != null)
			coresPropertyItemProvider.dispose();
		if (speedPropertyItemProvider != null)
			speedPropertyItemProvider.dispose();
	}

}
